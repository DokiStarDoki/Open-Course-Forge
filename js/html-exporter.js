/**
 * Course Forge MVP - HTML Exporter
 * Handles exporting courses to standalone HTML files
 */

class HTMLExporter {
  constructor() {
    if (CONFIG.DEBUG.ENABLED) {
      console.log("HTMLExporter initialized");
    }
  }

  /**
   * Generate complete HTML course
   */
  generateCourseHtml(courseData) {
    const slides = courseData.slides.filter((slide) => slide.content);

    const slidesHtml = slides
      .map((slide, index) => {
        const slideHtml = window.slideRenderer
          ? window.slideRenderer.renderSlide(slide, false)
          : this.renderBasicSlide(slide);

        return `
          <section class="course-slide" data-slide-index="${index}">
            ${slideHtml}
          </section>
        `;
      })
      .join("");

    return `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${this.escapeHtml(courseData.course.title)}</title>
        <style>
          ${this.getCourseExportStyles()}
        </style>
      </head>
      <body>
        <div class="course-container">
          <header class="course-header">
            <h1>${this.escapeHtml(courseData.course.title)}</h1>
            <div class="course-meta">
              ${
                courseData.course.targetAudience
                  ? `<p><strong>Target Audience:</strong> ${this.escapeHtml(
                      courseData.course.targetAudience
                    )}</p>`
                  : ""
              }
              ${
                courseData.course.estimatedDuration
                  ? `<p><strong>Estimated Duration:</strong> ${this.escapeHtml(
                      courseData.course.estimatedDuration
                    )}</p>`
                  : ""
              }
            </div>
            ${this.renderLearningObjectives(
              courseData.course.learningObjectives
            )}
          </header>
          
          <main class="course-content">
            ${slidesHtml}
          </main>
          
          <footer class="course-footer">
            <p>Generated by Course Forge MVP on ${new Date().toLocaleDateString()}</p>
            <p>Total slides: ${
              slides.length
            } • Estimated completion time: ${this.estimateReadingTime(
      slides
    )} minutes</p>
          </footer>
        </div>
        
        <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
        <script>
          ${this.getCourseExportScript()}
        </script>
      </body>
      </html>
    `;
  }

  /**
   * Render learning objectives
   */
  renderLearningObjectives(objectives) {
    if (!objectives || objectives.length === 0) return "";

    return `
      <div class="learning-objectives">
        <h3>Learning Objectives:</h3>
        <ul>
          ${objectives
            .map((obj) => `<li>${this.escapeHtml(obj)}</li>`)
            .join("")}
        </ul>
      </div>
    `;
  }

  /**
   * Render basic slide fallback
   */
  renderBasicSlide(slide) {
    const content = slide.content || {};

    return `
      <div class="slide">
        <h2>${this.escapeHtml(slide.title)}</h2>
        <div class="slide-content">
          ${this.renderSlideContent(content, slide.slideType)}
        </div>
      </div>
    `;
  }

  /**
   * Render slide content based on type
   */
  renderSlideContent(content, slideType) {
    switch (slideType) {
      case "textAndImage":
        return `
          <div class="text-and-image">
            <div class="text-content">${this.escapeHtml(
              content.text || ""
            )}</div>
            ${
              content.image
                ? `<img src="${content.image}" alt="Slide image" class="slide-image">`
                : ""
            }
          </div>
        `;

      case "textAndBullets":
        return `
          <div class="text-content">${this.escapeHtml(content.text || "")}</div>
          <ul class="bullet-list">
            ${(content.bullets || [])
              .map((bullet) => `<li>${this.escapeHtml(bullet)}</li>`)
              .join("")}
          </ul>
        `;

      case "multipleChoice":
        return `
          <div class="question-text">${this.escapeHtml(
            content.question || ""
          )}</div>
          <div class="options-container">
            ${(content.options || [])
              .map(
                (option, index) => `
              <div class="option-item" onclick="selectOption(this, ${index}, ${
                  content.correctAnswer || 0
                })">
                <div class="option-label">${String.fromCharCode(
                  65 + index
                )}</div>
                <div class="option-text">${this.escapeHtml(option)}</div>
              </div>
            `
              )
              .join("")}
          </div>
        `;

      case "iconsWithTitles":
        return `
          <div class="icons-grid">
            ${(content.icons || [])
              .map(
                (icon) => `
              <div class="icon-item">
                <div class="icon-container">
                  <i data-lucide="${icon.icon || "circle"}" class="icon"></i>
                </div>
                <h3 class="icon-title">${this.escapeHtml(icon.title || "")}</h3>
                <p class="icon-description">${this.escapeHtml(
                  icon.description || ""
                )}</p>
              </div>
            `
              )
              .join("")}
          </div>
        `;

      case "tabs":
        if (Array.isArray(content)) {
          return `
            <div class="tabs-container">
              <div class="tab-buttons">
                ${content
                  .map(
                    (tab, index) => `
                  <button class="tab-button ${index === 0 ? "active" : ""}" 
                          onclick="switchTab(this, ${index})">${this.escapeHtml(
                      tab.title || `Tab ${index + 1}`
                    )}</button>
                `
                  )
                  .join("")}
              </div>
              <div class="tab-content">
                ${content
                  .map(
                    (tab, index) => `
                  <div class="tab-panel ${
                    index === 0 ? "active" : ""
                  }" data-tab-index="${index}">
                    <div class="tab-text">${this.escapeHtml(
                      tab.content || ""
                    )}</div>
                  </div>
                `
                  )
                  .join("")}
              </div>
            </div>
          `;
        }
        break;

      case "flipCards":
        if (Array.isArray(content)) {
          return `
            <div class="cards-grid">
              ${content
                .map(
                  (card, index) => `
                <div class="flip-card" onclick="flipCard(this)">
                  <div class="flip-card-inner">
                    <div class="flip-card-front">
                      <div class="card-content">${this.escapeHtml(
                        card.front || ""
                      )}</div>
                    </div>
                    <div class="flip-card-back">
                      <div class="card-content">${this.escapeHtml(
                        card.back || ""
                      )}</div>
                    </div>
                  </div>
                </div>
              `
                )
                .join("")}
            </div>
          `;
        }
        break;

      case "faq":
        return `
          <div class="faq-container">
            ${(content.items || [])
              .map(
                (item, index) => `
              <div class="faq-item">
                <div class="faq-question" onclick="toggleFaq(this)">
                  <span class="question-text">${this.escapeHtml(
                    item.question || ""
                  )}</span>
                  <i data-lucide="chevron-down" class="faq-icon"></i>
                </div>
                <div class="faq-answer">
                  <div class="answer-text">${this.escapeHtml(
                    item.answer || ""
                  )}</div>
                </div>
              </div>
            `
              )
              .join("")}
          </div>
        `;

      default:
        return `<p>Content: ${this.escapeHtml(JSON.stringify(content))}</p>`;
    }

    return "";
  }

  /**
   * Get CSS styles for exported course
   */
  getCourseExportStyles() {
    return `
      /* Base Styles */
      * { margin: 0; padding: 0; box-sizing: border-box; }
      
      body { 
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; 
        margin: 0; padding: 0; line-height: 1.6; color: #333; 
        background: #f8fafc;
      }
      
      .course-container { 
        max-width: 900px; 
        margin: 0 auto; 
        padding: 2rem; 
        background: white;
        min-height: 100vh;
        box-shadow: 0 0 20px rgba(0,0,0,0.1);
      }
      
      /* Header Styles */
      .course-header { 
        text-align: center; 
        margin-bottom: 3rem; 
        padding-bottom: 2rem; 
        border-bottom: 2px solid #e5e7eb; 
      }
      
      .course-header h1 { 
        font-size: 2.5rem; 
        color: #1f2937; 
        margin-bottom: 1rem; 
        font-weight: 700;
      }
      
      .course-meta p { 
        margin: 0.5rem 0; 
        color: #6b7280; 
        font-size: 1.1rem;
      }
      
      .learning-objectives { 
        margin-top: 2rem; 
        text-align: left; 
        max-width: 600px; 
        margin-left: auto; 
        margin-right: auto; 
        background: #f9fafb;
        padding: 1.5rem;
        border-radius: 0.5rem;
        border-left: 4px solid #3b82f6;
      }
      
      .learning-objectives h3 {
        color: #1f2937;
        margin-bottom: 1rem;
        font-size: 1.25rem;
      }
      
      .learning-objectives ul {
        list-style: none;
        padding: 0;
      }
      
      .learning-objectives li {
        padding: 0.5rem 0;
        position: relative;
        padding-left: 2rem;
      }
      
      .learning-objectives li::before {
        content: "✓";
        position: absolute;
        left: 0;
        color: #10b981;
        font-weight: bold;
        font-size: 1.2rem;
      }
      
      /* Slide Styles */
      .course-slide { 
        margin-bottom: 4rem; 
        padding: 2.5rem; 
        background: white; 
        border-radius: 12px; 
        box-shadow: 0 4px 6px rgba(0,0,0,0.07);
        border: 1px solid #e5e7eb;
      }
      
      .slide h2 { 
        font-size: 2rem; 
        margin-bottom: 1.5rem; 
        color: #1f2937; 
        font-weight: 600;
      }
      
      .slide-content { 
        line-height: 1.8; 
        font-size: 1.1rem;
      }
      
      /* Text and Image Styles */
      .text-and-image {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 2rem;
        align-items: start;
      }
      
      .text-content {
        color: #374151;
      }
      
      .slide-image {
        width: 100%;
        height: auto;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      }
      
      /* Bullet List Styles */
      .bullet-list { 
        margin: 1.5rem 0; 
        padding-left: 0;
        list-style: none;
      }
      
      .bullet-list li {
        padding: 0.75rem 0 0.75rem 2rem;
        position: relative;
        color: #374151;
        font-size: 1.1rem;
      }
      
      .bullet-list li::before {
        content: "•";
        position: absolute;
        left: 0.75rem;
        color: #3b82f6;
        font-weight: bold;
        font-size: 1.4rem;
      }
      
      /* Icons Grid Styles */
      .icons-grid { 
        display: grid; 
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
        gap: 2rem; 
        margin: 2rem 0; 
      }
      
      .icon-item { 
        text-align: center; 
        padding: 2rem;
        border: 1px solid #e5e7eb;
        border-radius: 12px;
        background: #f9fafb;
        transition: all 0.3s ease;
      }
      
      .icon-item:hover {
        border-color: #3b82f6;
        transform: translateY(-4px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
      }
      
      .icon-container {
        margin-bottom: 1.5rem;
      }
      
      .icon {
        width: 3rem;
        height: 3rem;
        color: #3b82f6;
      }
      
      .icon-title { 
        margin: 0 0 1rem 0; 
        color: #1f2937; 
        font-size: 1.25rem;
        font-weight: 600;
      }
      
      .icon-description {
        margin: 0;
        color: #6b7280;
        line-height: 1.6;
      }
      
      /* Multiple Choice Styles */
      .question-text {
        font-size: 1.25rem;
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 2rem;
        padding: 1.5rem;
        background: #eff6ff;
        border-radius: 8px;
        border-left: 4px solid #3b82f6;
      }
      
      .options-container {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        margin-bottom: 2rem;
      }
      
      .option-item {
        display: flex;
        align-items: center;
        gap: 1.5rem;
        padding: 1.5rem;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
        background: white;
      }
      
      .option-item:hover {
        border-color: #3b82f6;
        background: #eff6ff;
        transform: translateX(4px);
      }
      
      .option-item.selected {
        border-color: #3b82f6;
        background: #eff6ff;
      }
      
      .option-item.correct {
        border-color: #10b981;
        background: #ecfdf5;
      }
      
      .option-item.incorrect {
        border-color: #ef4444;
        background: #fef2f2;
      }
      
      .option-label {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 2.5rem;
        height: 2.5rem;
        background: #f3f4f6;
        border-radius: 50%;
        font-weight: 700;
        color: #374151;
        flex-shrink: 0;
        font-size: 1.1rem;
      }
      
      .option-item.correct .option-label {
        background: #10b981;
        color: white;
      }
      
      .option-item.incorrect .option-label {
        background: #ef4444;
        color: white;
      }
      
      .option-text {
        flex: 1;
        color: #374151;
        font-size: 1.1rem;
      }
      
      /* Tabs Styles */
      .tabs-container { 
        margin: 2rem 0;
        border: 1px solid #e5e7eb;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
      }
      
      .tab-buttons { 
        display: flex; 
        background: #f9fafb; 
        border-bottom: 1px solid #e5e7eb; 
      }
      
      .tab-button { 
        flex: 1; 
        padding: 1.25rem 2rem; 
        border: none; 
        background: transparent; 
        color: #6b7280; 
        font-weight: 600; 
        cursor: pointer; 
        transition: all 0.2s ease;
        border-right: 1px solid #e5e7eb;
        font-size: 1rem;
      }
      
      .tab-button:last-child {
        border-right: none;
      }
      
      .tab-button.active { 
        background: white; 
        color: #3b82f6; 
        font-weight: 700;
      }
      
      .tab-button:hover:not(.active) { 
        background: #f3f4f6; 
        color: #374151; 
      }
      
      .tab-content {
        background: white;
      }
      
      .tab-panel { 
        display: none; 
        padding: 2rem; 
      }
      
      .tab-panel.active { 
        display: block; 
      }
      
      .tab-text {
        color: #374151;
        line-height: 1.7;
        font-size: 1.1rem;
      }
      
      /* Flip Cards Styles */
      .cards-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 2rem;
        margin: 2rem 0;
      }
      
      .flip-card {
        width: 100%;
        height: 220px;
        perspective: 1000px;
        cursor: pointer;
      }
      
      .flip-card-inner {
        position: relative;
        width: 100%;
        height: 100%;
        text-align: center;
        transition: transform 0.8s;
        transform-style: preserve-3d;
      }
      
      .flip-card.flipped .flip-card-inner {
        transform: rotateY(180deg);
      }
      
      .flip-card-front,
      .flip-card-back {
        position: absolute;
        width: 100%;
        height: 100%;
        backface-visibility: hidden;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      }
      
      .flip-card-front {
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
        color: white;
      }
      
      .flip-card-back {
        background: white;
        color: #374151;
        transform: rotateY(180deg);
        border: 1px solid #e5e7eb;
      }
      
      .card-content {
        font-weight: 600;
        line-height: 1.5;
        font-size: 1.1rem;
      }
      
      /* FAQ Styles */
      .faq-container {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        margin: 2rem 0;
      }
      
      .faq-item {
        border: 1px solid #e5e7eb;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
      }
      
      .faq-question {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem 2rem;
        background: #f9fafb;
        cursor: pointer;
        transition: all 0.2s ease;
      }
      
      .faq-question:hover {
        background: #f3f4f6;
      }
      
      .faq-item.open .faq-question {
        background: #eff6ff;
        color: #3b82f6;
        border-bottom: 1px solid #e5e7eb;
      }
      
      .question-text {
        font-weight: 600;
        color: #374151;
        font-size: 1.1rem;
      }
      
      .faq-item.open .question-text {
        color: #3b82f6;
      }
      
      .faq-icon {
        transition: transform 0.3s ease;
        color: #6b7280;
        width: 1.5rem;
        height: 1.5rem;
      }
      
      .faq-item.open .faq-icon {
        transform: rotate(180deg);
        color: #3b82f6;
      }
      
      .faq-answer {
        display: none;
        padding: 2rem;
        background: white;
        border-top: 1px solid #e5e7eb;
      }
      
      .faq-item.open .faq-answer {
        display: block;
      }
      
      .answer-text {
        color: #374151;
        line-height: 1.7;
        font-size: 1.05rem;
      }
      
      /* Footer Styles */
      .course-footer { 
        text-align: center; 
        margin-top: 4rem; 
        padding-top: 2rem; 
        border-top: 2px solid #e5e7eb; 
        color: #9ca3af;
        background: #f9fafb;
        margin-left: -2.5rem;
        margin-right: -2.5rem;
        padding-left: 2.5rem;
        padding-right: 2.5rem;
        padding-bottom: 2rem;
      }
      
      .course-footer p {
        margin: 0.5rem 0;
        font-size: 0.95rem;
      }
      
      /* Responsive Design */
      @media (max-width: 768px) {
        .course-container {
          padding: 1rem;
        }
        
        .course-header h1 {
          font-size: 2rem;
        }
        
        .course-slide {
          padding: 1.5rem;
          margin-bottom: 2rem;
        }
        
        .text-and-image {
          grid-template-columns: 1fr;
          gap: 1.5rem;
        }
        
        .icons-grid {
          grid-template-columns: 1fr;
        }
        
        .cards-grid {
          grid-template-columns: 1fr;
        }
        
        .tab-buttons {
          flex-direction: column;
        }
        
        .tab-button {
          border-right: none;
          border-bottom: 1px solid #e5e7eb;
        }
        
        .tab-button:last-child {
          border-bottom: none;
        }
        
        .option-item {
          padding: 1rem;
        }
        
        .faq-question {
          padding: 1rem 1.5rem;
        }
        
        .faq-answer {
          padding: 1.5rem;
        }
      }
      
      /* Print Styles */
      @media print {
        .course-container {
          box-shadow: none;
          padding: 1rem;
        }
        
        .course-slide {
          box-shadow: none;
          border: 1px solid #e5e7eb;
          break-inside: avoid;
          page-break-inside: avoid;
        }
        
        .flip-card {
          height: auto;
        }
        
        .flip-card-back {
          transform: none;
          position: static;
          margin-top: 1rem;
        }
      }
      
      /* Animation Classes */
      @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
      }
      
      .fade-in {
        animation: fadeIn 0.6s ease-out;
      }
    `;
  }

  /**
   * Get JavaScript for exported course functionality
   */
  getCourseExportScript() {
    return `
      // Initialize Lucide icons
      if (typeof lucide !== 'undefined') {
        lucide.createIcons();
      }
      
      // Add fade-in animation to slides
      document.addEventListener('DOMContentLoaded', function() {
        const slides = document.querySelectorAll('.course-slide');
        slides.forEach((slide, index) => {
          setTimeout(() => {
            slide.classList.add('fade-in');
          }, index * 200);
        });
      });
      
      // Tab functionality
      function switchTab(button, index) {
        const container = button.closest('.tabs-container');
        const buttons = container.querySelectorAll('.tab-button');
        const panels = container.querySelectorAll('.tab-panel');
        
        buttons.forEach(btn => btn.classList.remove('active'));
        panels.forEach(panel => panel.classList.remove('active'));
        
        button.classList.add('active');
        panels[index].classList.add('active');
        
        // Re-initialize icons in the active panel
        if (typeof lucide !== 'undefined') {
          lucide.createIcons();
        }
      }
      
      // FAQ functionality
      function toggleFaq(question) {
        const item = question.parentElement;
        const answer = item.querySelector('.faq-answer');
        const icon = question.querySelector('.faq-icon');
        
        item.classList.toggle('open');
        
        if (item.classList.contains('open')) {
          answer.style.display = 'block';
          if (icon) {
            icon.style.transform = 'rotate(180deg)';
          }
        } else {
          answer.style.display = 'none';
          if (icon) {
            icon.style.transform = 'rotate(0deg)';
          }
        }
      }
      
      // Multiple choice functionality
      function selectOption(element, selectedIndex, correctIndex) {
        const container = element.closest('.options-container');
        const options = container.querySelectorAll('.option-item');
        const feedback = container.parentElement.querySelector('.feedback-container');
        
        // Remove previous selections
        options.forEach(opt => opt.classList.remove('selected', 'correct', 'incorrect'));
        
        // Mark selected option
        element.classList.add('selected');
        
        // Show correct/incorrect feedback
        if (selectedIndex === correctIndex) {
          element.classList.add('correct');
          if (feedback) {
            feedback.innerHTML = '<div class="feedback correct">✓ Correct! Well done.</div>';
            feedback.style.display = 'block';
          }
        } else {
          element.classList.add('incorrect');
          options[correctIndex].classList.add('correct');
          if (feedback) {
            feedback.innerHTML = '<div class="feedback incorrect">✗ Not quite right. The correct answer is highlighted.</div>';
            feedback.style.display = 'block';
          }
        }
      }
      
      // Flip card functionality
      function flipCard(card) {
        card.classList.toggle('flipped');
      }
      
      // Smooth scrolling for internal links
      document.addEventListener('click', function(e) {
        if (e.target.tagName === 'A' && e.target.getAttribute('href').startsWith('#')) {
          e.preventDefault();
          const target = document.querySelector(e.target.getAttribute('href'));
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        }
      });
      
      // Keyboard navigation
      document.addEventListener('keydown', function(e) {
        switch(e.key) {
          case 'Home':
            window.scrollTo({ top: 0, behavior: 'smooth' });
            break;
          case 'End':
            window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });
            break;
        }
      });
      
      // Progress tracking
      let courseProgress = {
        slidesViewed: new Set(),
        questionsAnswered: new Set(),
        cardsFlipped: new Set()
      };
      
      // Track slide views
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const slideIndex = entry.target.dataset.slideIndex;
            if (slideIndex) {
              courseProgress.slidesViewed.add(slideIndex);
              updateProgress();
            }
          }
        });
      }, { threshold: 0.5 });
      
      document.querySelectorAll('.course-slide').forEach(slide => {
        observer.observe(slide);
      });
      
      // Update progress indicator
      function updateProgress() {
        const totalSlides = document.querySelectorAll('.course-slide').length;
        const viewedSlides = courseProgress.slidesViewed.size;
        const progressPercentage = Math.round((viewedSlides / totalSlides) * 100);
        
        // Update progress indicator if it exists
        const progressIndicator = document.querySelector('.progress-indicator');
        if (progressIndicator) {
          progressIndicator.textContent = \`Progress: \${progressPercentage}%\`;
        }
        
        // Store progress in localStorage
        try {
          localStorage.setItem('courseProgress', JSON.stringify({
            slidesViewed: Array.from(courseProgress.slidesViewed),
            lastAccessed: new Date().toISOString()
          }));
        } catch (e) {
          // Ignore localStorage errors
        }
      }
      
      // Load previous progress
      try {
        const savedProgress = localStorage.getItem('courseProgress');
        if (savedProgress) {
          const parsed = JSON.parse(savedProgress);
          courseProgress.slidesViewed = new Set(parsed.slidesViewed || []);
          updateProgress();
        }
      } catch (e) {
        // Ignore localStorage errors
      }
      
      // Print functionality
      function printCourse() {
        window.print();
      }
      
      // Add print button if desired
      if (document.querySelector('.course-header')) {
        const printBtn = document.createElement('button');
        printBtn.innerHTML = '🖨️ Print Course';
        printBtn.style.cssText = 'position: fixed; top: 20px; right: 20px; padding: 0.5rem 1rem; background: #3b82f6; color: white; border: none; border-radius: 0.375rem; cursor: pointer; z-index: 1000;';
        printBtn.onclick = printCourse;
        document.body.appendChild(printBtn);
      }
      
      console.log('Course export loaded successfully');
    `;
  }

  /**
   * Estimate reading time for slides
   */
  estimateReadingTime(slides) {
    const wordsPerMinute = 200;
    let totalWords = 0;

    slides.forEach((slide) => {
      if (slide.content) {
        totalWords += this.countWords(slide.content);
      }
    });

    return Math.max(1, Math.ceil(totalWords / wordsPerMinute));
  }

  /**
   * Count words in content object
   */
  countWords(content) {
    let words = 0;

    if (typeof content === "string") {
      return content.split(/\s+/).length;
    }

    if (typeof content === "object") {
      Object.values(content).forEach((value) => {
        if (typeof value === "string") {
          words += value.split(/\s+/).length;
        } else if (Array.isArray(value)) {
          value.forEach((item) => {
            if (typeof item === "string") {
              words += item.split(/\s+/).length;
            } else if (typeof item === "object") {
              words += this.countWords(item);
            }
          });
        } else if (typeof value === "object") {
          words += this.countWords(value);
        }
      });
    }

    return words;
  }

  /**
   * Escape HTML for safe rendering
   */
  escapeHtml(text) {
    if (typeof text !== "string") return "";
    const div = document.createElement("div");
    div.textContent = text;
    return div.innerHTML;
  }

  /**
   * Generate course with custom template
   */
  generateWithTemplate(courseData, templateName = "default") {
    // Future: Support for different export templates
    return this.generateCourseHtml(courseData);
  }

  /**
   * Generate course package (HTML + assets)
   */
  generateCoursePackage(courseData) {
    const html = this.generateCourseHtml(courseData);

    // Future: Include additional assets like images, fonts, etc.
    return {
      "index.html": html,
      "course-data.json": JSON.stringify(courseData, null, 2),
      "readme.txt": this.generateReadme(courseData),
    };
  }

  /**
   * Generate readme file for course package
   */
  generateReadme(courseData) {
    return `
Course: ${courseData.course.title}
Generated: ${new Date().toLocaleDateString()}
Slides: ${courseData.slides.length}

This package contains:
- index.html: The main course file (open this in a web browser)
- course-data.json: Raw course data in JSON format
- readme.txt: This file

Instructions:
1. Open index.html in any modern web browser
2. The course will work offline once loaded
3. Use keyboard navigation (Home/End keys) for quick navigation
4. Print functionality is available via the print button

Generated by Course Forge MVP
    `.trim();
  }
}
